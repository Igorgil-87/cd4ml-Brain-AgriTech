############################
# GRUPO 1: Jenkins e Welcome
############################
services:
  welcome:
    container_name: welcome_server
    image: httpd:2.4-alpine
    ports:
      - "3000:80"
    volumes:
      - ./public-html:/usr/local/apache2/htdocs/
    networks:
      - jenkins_nw

  jenkins:
    container_name: jenkins
    build:
      context: .
      dockerfile: Dockerfile-jenkins
    ports:
      - "10000:8080"
    environment:
      FLUENTD_HOST: fluentd
      FLUENTD_PORT: 24224
      TENANT: "jenkins"
      ACCESS_KEY: ${JENKINS_ACCESS_KEY}
      SECRET_KEY: ${JENKINS_SECRET_KEY}
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    secrets:
      - jenkins-admin-password
    networks:
      - jenkins_nw
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8080/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 8g
          cpus: "2"
        reservations:
          memory: 4g
          cpus: "1"
    restart: unless-stopped

##########################
# GRUPO 2: Dagster stack
##########################
  dagster-webserver:
    build:
      context: .
      dockerfile: Dockerfile-dagster
    image: dagster-webserver:local
    container_name: dagster-webserver
    volumes:
      - ./dagster:/opt/dagster/app
      - ./dagster/dagster_home:/opt/dagster/dagster_home
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      PYTHONPATH: /opt/dagster/app
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: "#alertas-dagster"
    ports:
      - "3010:3000"
    command: "dagster-webserver"
    networks:
      - jenkins_nw
      - default  # <- saida 

  dagster-daemon:
    build:
      context: .
      dockerfile: Dockerfile-dagster
    container_name: dagster-daemon
    command: "dagster-daemon run"
    restart: always
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
    working_dir: /opt/dagster/app
    volumes:
      - ./dagster:/opt/dagster/app
      - ./dagster/dagster_home:/opt/dagster/dagster_home
    networks:
      - jenkins_nw


  model:
    build:
      context: .
      dockerfile: Dockerfile-model
    container_name: model
    ports:
      - "11000:5005"
    environment:
      FLUENTD_HOST: fluentd
      FLUENTD_PORT: 24224
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      ACCESS_KEY: ${MINIO_ACCESS_KEY}
      SECRET_KEY: ${MINIO_SECRET_KEY}
    networks:
      - jenkins_nw
    depends_on:
      - fluentd
      - minio

############################
# GRUPO 3: MinIO e MLflow
############################
  minio:
    image: minio/minio:RELEASE.2020-08-08T04-50-06Z
    container_name: minio
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    entrypoint: sh
    command: -c 'mkdir -p /data/cd4ml-ml-flow-bucket && /usr/bin/minio server /data'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio-storage:/data
    networks:
      - jenkins_nw

  mlflow:
    container_name: mlflow
    build:
      context: .
      dockerfile: Dockerfile-mlflow
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "12000:5000"
    networks:
      - jenkins_nw
    volumes:
      - mlflow-storage:/mnt/mlflow
    depends_on:
      - minio

#########################
# GRUPO 4: Airflow stack
#########################
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d:ro
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jenkins_nw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.6.1
    restart: always
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://agro_user:agro_password@postgres:5432/brain_agro
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8083:8080"
    command: >
      bash -c "
        airflow db upgrade &&
        airflow users create --username admin --firstname Admin --lastname Admin --role Admin --email admin@admin.com --password admin &&
        airflow webserver
      "
    networks:
      - jenkins_nw

  airflow-scheduler:
    image: apache/airflow:2.6.1
    restart: always
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://agro_user:agro_password@postgres:5432/brain_agro
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
    command: scheduler
    networks:
      - jenkins_nw

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8081:80"
    networks:
      - jenkins_nw
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

#########################
# GRUPO 5: Logging e Dados
#########################
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - http.port=9200
      - http.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - jenkins_nw

  kib01:
    image: docker.elastic.co/kibana/kibana:7.6.0
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - jenkins_nw
    depends_on:
      - es01

  fluentd:
    image: ericnaglertw/cd4ml-fluentd:1
    container_name: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    ports:
      - "24224:24224"
    networks:
      - jenkins_nw
    depends_on:
      - es01

  load_data:
    build:
      context: .
      dockerfile: load_data/Dockerfile
    container_name: load_data
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
    networks:
      - jenkins_nw
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["sh", "-c", "while ! pg_isready -h postgres -U ${POSTGRES_USER}; do sleep 1; done; python /app/scripts/load_data.py"]
    deploy:
      resources:
        limits:
          memory: 4g

#########################
# GRUPO 6: Dev tools
#########################
  dev:
    container_name: dev
    image: jupyter/minimal-notebook:54462805efcb
    environment:
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    entrypoint: "start.sh"
    command: "jupyter lab --LabApp.token=''"
    volumes:
      - .:/home/jovyan/
    networks:
      - jenkins_nw

#########################
# Volumes, Redes e Segredos
#########################
volumes:
  jenkins_home:
  data01:
  minio-storage:
  mlflow-storage:
  postgres_data:

networks:
  jenkins_nw:
    driver: bridge

secrets:
  jenkins-admin-password:
    file: ./jenkins/jenkins-admin-password.txt
