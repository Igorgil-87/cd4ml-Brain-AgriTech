#!/bin/bash

set -euo pipefail

echo "üì¶ [IN√çCIO] Setup automatizado do Spinnaker com valida√ß√µes e seguran√ßa"

echo "üîç Verificando se cluster KIND 'spinnaker' j√° existe..."
if kind get clusters | grep -q '^spinnaker$'; then
  echo "‚úÖ Cluster 'spinnaker' j√° existe, pulando cria√ß√£o."
else
  echo "üöÄ Criando cluster KIND 'spinnaker'..."
  kind create cluster --name spinnaker
fi

echo "üîç Verificando se pod MySQL j√° existe..."
if kubectl get pod mysql &>/dev/null; then
  echo "‚úÖ Pod MySQL j√° est√° criado."
else
  echo "üê¨ Criando pod MySQL no cluster..."
  kubectl run mysql \
    --image=mariadb:10.2 \
    --env="MYSQL_ROOT_PASSWORD=123" \
    --env="MYSQL_DATABASE=front50" \
    --port=3306
  kubectl expose pod mysql --port=3306 --target-port=3306 --name=mysql
fi

echo "‚è≥ Aguardando MySQL ficar pronto..."
kubectl wait --for=condition=Ready pod/mysql --timeout=120s || {
  echo "‚ùå MySQL n√£o ficou pronto a tempo. Abortando."; exit 1;
}

echo "üîç Verificando se container 'halyard' j√° est√° rodando..."
if docker ps --format '{{.Names}}' | grep -q '^halyard$'; then
  echo "‚úÖ Container 'halyard' j√° est√° em execu√ß√£o."
else
  echo "üê≥ Iniciando container Halyard..."
  docker run -d --name halyard \
    -v ~/.kube:/home/spinnaker/.kube \
    -v ~/.hal:/home/spinnaker/.hal \
    -p 8064:8064 \
    --network host \
    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  sleep 10
fi

echo "‚è≥ Aguardando Halyard ficar pronto para comandos..."
START_TIME=$(date +%s)
TIMEOUT=90  # m√°ximo 90 segundos
RETRY_INTERVAL=3

while true; do
  if docker exec halyard hal -v &>/dev/null; then
    echo "‚úÖ Halyard pronto para uso!"
    break
  fi

  CURRENT_TIME=$(date +%s)
  ELAPSED=$((CURRENT_TIME - START_TIME))

  if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
    echo "‚ùå Tempo limite excedido esperando o Halyard responder. Verifique com: docker logs halyard"
    exit 1
  fi

  echo "‚åõ Halyard ainda iniciando... ($ELAPSED s)"
  sleep $RETRY_INTERVAL
done
echo "‚úÖ Halyard pronto para uso!"

echo "‚öôÔ∏è Executando configura√ß√µes dentro do Halyard..."
docker exec -i halyard bash <<'EOF'
set -e

echo "üîß Configurando vers√£o do Spinnaker..."
hal config version edit --version 1.30.1 || true

echo "üîß Habilitando provider Kubernetes..."
hal config provider kubernetes enable || true

echo "üîç Verificando se conta 'my-k8s-account' j√° existe..."
if ! hal config provider kubernetes account list | grep -q 'my-k8s-account'; then
  echo "‚ûï Adicionando conta 'my-k8s-account'..."
  hal config provider kubernetes account add my-k8s-account --context kind-spinnaker
else
  echo "‚úÖ Conta 'my-k8s-account' j√° est√° configurada."
fi

echo "üîß Configurando ambiente de deploy distribu√≠do..."
hal config deploy edit --type distributed --account-name my-k8s-account || true

echo "üíæ Configurando armazenamento usando MySQL (front50)..."
mkdir -p /home/spinnaker/.hal/default/profiles
cat > /home/spinnaker/.hal/default/profiles/front50-local.yml <<EOC
sql:
  enabled: true
  connectionPools:
    default:
      default: true
      jdbcUrl: jdbc:mysql://mysql.default.svc.cluster.local:3306/front50
      user: root
      password: 123
  migration:
    user: root
    password: 123
    jdbcUrl: jdbc:mysql://mysql.default.svc.cluster.local:3306/front50
spinnaker:
  redis:
    enabled: false
EOC

echo "üöÄ Aplicando deploy do Spinnaker..."
hal deploy apply || true
EOF

echo "‚è≥ Aguardando namespace 'spinnaker' existir..."
until kubectl get ns spinnaker &>/dev/null; do
  echo "‚åõ Aguardando cria√ß√£o do namespace 'spinnaker'..."
  sleep 5
done

echo "üìä Aguardando pods do Spinnaker estarem prontos..."
kubectl wait --for=condition=Ready pods --all -n spinnaker --timeout=300s || {
  echo "‚ö†Ô∏è Nem todos os pods ficaram prontos a tempo. Verifique com: kubectl get pods -n spinnaker"
}
kubectl get pods -n spinnaker

echo "üåê Verificando se Ingress j√° foi criado..."
if kubectl get ingress -n spinnaker spinnaker-ingress &>/dev/null; then
  echo "‚úÖ Ingress j√° existe."
else
  echo "üì• Criando Ingress para acessar o Spinnaker via spinnaker.local..."
  cat <<EOF | kubectl apply -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spinnaker-ingress
  namespace: spinnaker
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: spinnaker.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spin-deck
            port:
              number: 9000
EOF
fi

echo ""
echo "‚úÖ [FINALIZADO] Spinnaker instalado com sucesso!"
echo "üåç Acesse via navegador: http://spinnaker.local"
echo "üí° Adicione ao /etc/hosts se necess√°rio: 127.0.0.1 spinnaker.local"
echo "üëÄ Para acompanhar os pods em tempo real, execute:"
echo "    watch kubectl get pods -n spinnaker"